Version 1.3
===========

New libjpeg compatibility introduced.  

Using this version of libshjpeg with the libjpeg compatibility enabled will 
allow programs designed for use with libjpeg to transparently use the hardware 
acceleration capabilities of Renesas's SH7772/4 SoC provided JPU 
(Jpeg Processing Unit).  The application and system requirements are listed below.

Obtaining libshjpeg
==================
The source files for libshjpeg can be found online at http://github.com/dhobsong/libshjpeg where they may be downloaded in a tarball or using git.  

libjpeg Licensing
=================
With the addition of libjpeg compatibility, this software is based in part on
the work of the Independent JPEG Group.  No source files from the libjpeg 
library are distributed with this software although they are necessary for 
compilation of a libjpeg compatible libshjpeg.

The Independent JPEG Group's most recent library versions (currently 8b) can be
obtained from their archive at http://www.ijg.org/files/

Application Requirements
========================

No application code needs to be changed, however, the application must be 
re-linked to use this library instead of libjpeg (i.e. change -ljpeg to 
-lshjpeg in your compilation scripts)

Build System Requirements
=========================

In order to successfully create the libjpeg wrapper, then build system should 
have a copy of the libjpeg source for the version that you wish to use on the 
target system.  

Target System Requirements
==========================

Since this library will automatically fall back to use libjpeg functions when 
the hardware acceleration cannot handle the conversion, a working version of 
libjpeg must exist on the target system as a SHARED library. In particular, 
for libjpeg version 6b, this means configuring your build with 
	./configure --enable-shared 
before compiling.

Compilation
===========

 * Ensure that the libjpeg library is installed and properly working on your
   target platfomr.  libjpeg can be downloaded from severayl sources including
   http://www.ijg.org/files/  older versions may be archived at other sites,
   such as http://sourceforge.net.  A example of how to compile libjpeg
   follows in the Compilation Example section

 * Once libjpeg is compiled and installed confirm the existence of jconfig.h
   and jversion.h.  You may need to recompile and re-install libjpeg to
   generate these files.

 * Set the environment variable LIBJPEG_INC_PATH to the directory containing 
   the libjpeg source files for the version that you want to use.
 
 * execute 'gen/genapi' to create the libjpeg compatible API based on the 
   libjpeg version specified in LIBJPEG_INC_PATH
 
 * execute 'autoreconf -vif' to generate a configure file

 * execute 'configure' with any desired options.  The libjpeg compatible 
   interface will be compiled if the variable of LIBJPEG_INC_PATH is set. 
   Alternatively this value can be specified with the configure option 
   --enable/--disable-jpeg-wrapper
 * execute 'make' to build the library and test programs and 'make install'
   to install them

  *libjpeg-62 and earlier releases.
   -------------------------------
   This library has been tested with libjpeg versions 62 and 80.  Earlier 
   versions may or may not work without modification.  It is likely that 
   some kind of modifications would be necessary. Version 80 can be used 
   as is with libshjpeg, but the following points must be 
   observed when using version 62. 

   *NOTE1: when compiling an error stating that HAVE_STDLIB_H is redefined 
    may occur.  This is a bug in the libjpeg library and has been corrected 
    on recent versions.  This problem can be solved by changing the definition 
    in jconfig.h to 
    #define HAVE_STDLIB_H 1

   *NOTE2: decoding files with large amounts of EXIF or other metadata may 
    fail.  This too, is an omission in the earlier versions of libjpeg that 
    version 80 users need not worry about.  To fix this problem the libjpeg 
    code can be patched using the included file and the patch command a 
    follows.

    patch -p1 < libjpeg6_skipfix.patch

   *NOTE3: The --host cross-comilation option for configue in libjpeg-6b
    does not function correctly.  Instead, the CC option should be used
    to specify the cross compiler

    CC=arm-linux-gnueadi-gcc ./configure --enable-shared

Compilation Examples
====================
The following examples show the commands necessary to compile libshjpeg and
the libjpeg settings that are necesary. Either libjpeg-6b or libjpeg-8b must
be compied BEFORE libshjpeg can be compiled.

libjpeg-6b (option 1)
---------------------
Assuming that the libjpeg-6b source files are located in <path>/jpeg-6b and
the libshjpeg source files are located in <path>/shjpeg

/# cd <path>/jpeg-6b
<path>/jpeg-6b# cp <path>/shjpeg/libjpeg6_skipfix.patch .
<path>/jpeg-6b# patch -p1 < libjpeg6_skipfix.patch
<path>/jpeg-6b# CC=arm-linux-gnueabi-gcc ./configure --enable-shared
<path>/jpeg-6b# make
<path>/jpeg-6b# make install
<path>/jpeg-6b# edit jconfig.h (see Note 1 in compilation)
<path>/jpeg-6b# export LIBJPEG_INC_PATH=<path>/jpeg-6b

libjpeg-8b (option 2)
---------------------
Assuming that the libjpeg-8b source files are located in <path>/jpeg-8b

/# cd <path>/jpeg-8b
<path>/jpeg-8b# ./configure --host=arm-linux-gnueabi
<path>/jpeg-8b# make
<path>/jpeg-8b# make install
<path>/jpeg-8b# export LIBJPEG_INC_PATH=<path>/jpeg-8b

libshjpeg
---------
Assuming that the libshjpeg source files are located in <path>/shjpeg

**check that LIBJPEG_INC_PATH points to the correct libjpeg directory.**

/# cd <path>/shjpeg
<path>/shjpeg# cd gen
<path>/shjpeg/gen# ./genapi
<path>/shjpeg/gen# cd ..
<path>/shjpeg# autoreconf -vif
<path>/shjpeg# ./configure --host=arm-linux-gnueabi
<path>/shjpeg# export echo=/bin/echo
<path>/shjpeg# make
<path>/shjpeg# make install

Features
========
The libshjpeg library can decode to and encode from buffers with the following standard libjpeg colour coding

     * JCS_RGB24 
     * JCS_GRAYSCALE (coming soon - maybe)
     * JCS_YCrCb

Additionally the following non-standard libjpeg formats are supported
     * JCS_RGB565 (on Android)
     * JCS_RGBA888 (on Android)

As well as the following when using the direct hardware interface
     * NV12
     * NV16

Usage
=====
 * libshjpeg has two interfaces to the access the JPU.  The traditional 
   interface (available until version 1.2) remains, and can be used directly.  
   The libjpeg compatible version shouldn't require any modification to any 
   code that currently runs using libjpeg.  There are however, some limitations 
   when in using the libjpeg compatible interface.  These are detailed in the 
   next section.

Limitations
===========

 * No parallel processing -  Only one JPEG can be compressed/decompressed 
   at a time.  
	This means that once a call to 'jpeg_start_decompress' or 
	'jpeg_start_compress' is issued using a given cinfo context, no other 
	library calls can be made using a different context until the first 
	compression/decompression cycle is completed with a call to 
	'jpeg_finish_decompress'/'jpeg_finish_compress', 'jpeg_abort', or 
	'jpeg_destroy'

 * libjpeg virtual array mechanism not supported.
	The major effect of this is that scanline order would have to be 
	manually reversed in order to change the image data from top-to-
	bottom order to bottom-to-top order.
 
 * forcing colour and quality conversion on output.
	Currently, output JPEGs are always generated in YCrCb color format.  
	There is no support to force color data to grayscale output yet. 
	Likewise all output compression level cannot be adjusted.

Errors, Warnings, Information messages
======================================

The libjpeg interface of libshjpeg adds its information messages to the same 
mechanism used for libjpeg.  Messages are delivered either through jpeg_std_error 
the user specified error handler in the same way that libjpeg messages are. 
Trace messages are dispatched at error message level 1 by default.
The direct JPU access interface delivers messages to stderr.  

